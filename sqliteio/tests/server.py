
# Generated by Qodo Gen
from sqliteio.sqliteio.core import SQLiteSocket


# Dependencies:
# pip install pytest-mock
import pytest

class TestMain:

    # Server starts successfully and listens for connections
    import pytest
    from sqliteio.core import SQLiteSocket
    import asyncio

    @pytest.mark.asyncio
    async def test_server_starts_and_listens(self, mocker):
        mocker.patch('builtins.print')
        server = SQLiteSocket("example.db", peer_id="server1", is_server=True)
        await server.start()
        assert server.running is True
        print.assert_called_with("Server is running. Press CTRL+C to stop.")

    # Attempt to start the server with a duplicate peer_id
    import pytest
    from sqliteio.core import SQLiteSocket
    import asyncio

    @pytest.mark.asyncio
    async def test_duplicate_peer_id_error(self, mocker):
        mocker.patch('builtins.print')
        server1 = SQLiteSocket("example.db", peer_id="server1", is_server=True)
        await server1.start()
    
        server2 = SQLiteSocket("example.db", peer_id="server1", is_server=True)
        with pytest.raises(RuntimeError, match="Server server1 is already running."):
            await server2.start()